//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/InputSystem/InputAssets.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputAssets : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputAssets()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputAssets"",
    ""maps"": [
        {
            ""name"": ""PlayerControl"",
            ""id"": ""bdbc08c4-67a7-4327-a1bb-ae91284b3c08"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""fc53842b-9703-4d8a-b222-6699318ba8b7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""StartTouch"",
                    ""type"": ""Value"",
                    ""id"": ""ba77a2fb-be88-413d-b7fb-85fb24027623"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""HoldTouch"",
                    ""type"": ""Button"",
                    ""id"": ""2d3bb7ab-06a5-4f17-863c-86fe2aa28d8a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6b7cd5be-3e54-418b-9274-a6fa14a94dbc"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c020325f-7b90-4f04-bb7d-f14bcf59a63c"",
                    ""path"": ""<Touchscreen>/primaryTouch/startPosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StartTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""99de8cc4-bdf4-450c-80e3-222f53dfcdf5"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HoldTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerControl
        m_PlayerControl = asset.FindActionMap("PlayerControl", throwIfNotFound: true);
        m_PlayerControl_Move = m_PlayerControl.FindAction("Move", throwIfNotFound: true);
        m_PlayerControl_StartTouch = m_PlayerControl.FindAction("StartTouch", throwIfNotFound: true);
        m_PlayerControl_HoldTouch = m_PlayerControl.FindAction("HoldTouch", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerControl
    private readonly InputActionMap m_PlayerControl;
    private IPlayerControlActions m_PlayerControlActionsCallbackInterface;
    private readonly InputAction m_PlayerControl_Move;
    private readonly InputAction m_PlayerControl_StartTouch;
    private readonly InputAction m_PlayerControl_HoldTouch;
    public struct PlayerControlActions
    {
        private @InputAssets m_Wrapper;
        public PlayerControlActions(@InputAssets wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_PlayerControl_Move;
        public InputAction @StartTouch => m_Wrapper.m_PlayerControl_StartTouch;
        public InputAction @HoldTouch => m_Wrapper.m_PlayerControl_HoldTouch;
        public InputActionMap Get() { return m_Wrapper.m_PlayerControl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerControlActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerControlActions instance)
        {
            if (m_Wrapper.m_PlayerControlActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_PlayerControlActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PlayerControlActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PlayerControlActionsCallbackInterface.OnMove;
                @StartTouch.started -= m_Wrapper.m_PlayerControlActionsCallbackInterface.OnStartTouch;
                @StartTouch.performed -= m_Wrapper.m_PlayerControlActionsCallbackInterface.OnStartTouch;
                @StartTouch.canceled -= m_Wrapper.m_PlayerControlActionsCallbackInterface.OnStartTouch;
                @HoldTouch.started -= m_Wrapper.m_PlayerControlActionsCallbackInterface.OnHoldTouch;
                @HoldTouch.performed -= m_Wrapper.m_PlayerControlActionsCallbackInterface.OnHoldTouch;
                @HoldTouch.canceled -= m_Wrapper.m_PlayerControlActionsCallbackInterface.OnHoldTouch;
            }
            m_Wrapper.m_PlayerControlActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @StartTouch.started += instance.OnStartTouch;
                @StartTouch.performed += instance.OnStartTouch;
                @StartTouch.canceled += instance.OnStartTouch;
                @HoldTouch.started += instance.OnHoldTouch;
                @HoldTouch.performed += instance.OnHoldTouch;
                @HoldTouch.canceled += instance.OnHoldTouch;
            }
        }
    }
    public PlayerControlActions @PlayerControl => new PlayerControlActions(this);
    public interface IPlayerControlActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnStartTouch(InputAction.CallbackContext context);
        void OnHoldTouch(InputAction.CallbackContext context);
    }
}
